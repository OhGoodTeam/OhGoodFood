<?xml version="1.0" encoding="UTF-8"?>
<!-- Mapper의 이름은 Mapper 인터페이스와 맞춰준다. -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http:/mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ohgoodfood.dao.UserMapper">
    <!-- selectAllStore mapper -->
    <!-- selectAllStore mapper, main에서 이용한다. -->
    <select id="selectAllStore" parameterType="map" resultType="kr.co.ohgoodfood.dto.MainStore">
        SELECT
            s.store_id AS store_id, s.store_name AS store_name, s.store_menu AS store_menu, s.store_status AS store_status, s.category_bakery AS category_bakery, s.category_fruit AS category_fruit, s.category_salad AS category_salad, s.category_others AS category_others, s.closed_at AS closed_at,
            COALESCE(pf.product_no, pa.product_no) AS product_no,
            pf.pickup_start AS pickup_start, pf.pickup_end AS pickup_end, pf.origin_price AS origin_price, pf.sale_price AS sale_price, pf.product_explain AS product_explain, pf.reservation_end AS reservation_end, pf.amount AS amount,
            img.first_img AS store_img
        FROM Store s
        LEFT JOIN (
            SELECT
                store_id,
                MIN(product_no) AS product_no
            FROM Product
            GROUP BY store_id
        ) pa ON pa.store_id = s.store_id
        LEFT JOIN Product pf ON pf.store_id = s.store_id
            AND (
            pf.reservation_end IS NULL
            OR DATE(pf.reservation_end) = CURDATE()
            )
        LEFT JOIN (
            SELECT
                store_id,
                MIN(store_img) AS first_img
                FROM Image
            GROUP BY store_id
        ) img ON img.store_id = s.store_id
        <where>
            <if test="filter.store_status != null">
                AND s.store_status = #{filter.store_status} AND pf.amount >= ${filter.amount}
            </if>
            <if test="filter.pickup_start != null">
                AND DATE(pf.pickup_start) = #{filter.pickup_start}
            </if>
            <if test="filter.category_bakery != null">
                AND s.category_bakery = #{filter.category_bakery}
            </if>
            <if test="filter.category_fruit != null">
                AND s.category_fruit = #{filter.category_fruit}
            </if>
            <if test="filter.category_salad != null">
                AND s.category_salad = #{filter.category_salad}
            </if>
            <if test="filter.category_others != null">
                AND s.category_others = #{filter.category_others}
            </if>
            <!-- 가게 이름, 가게 대표 메뉴, 가게 주소, 가게 상세 검색 필터링 추가 -->
            <if test="filter.search != null and filter.search != ''">
                AND (
                    s.store_name LIKE CONCAT('%', #{filter.search}, '%')
                    OR s.store_menu LIKE CONCAT('%', #{filter.search}, '%')
                    OR pf.product_explain LIKE CONCAT('%', #{filter.search}, '%')
                )
            </if>
        </where>
    </select>

    <!-- selectAllBookmark mapper, bookmark에서 이용한다. -->
    <select id="selectAllBookmark" resultType="kr.co.ohgoodfood.dto.Bookmark">
        SELECT
            s.store_id AS store_id, s.store_name AS store_name, s.store_menu AS store_menu, s.store_status AS store_status, s.category_bakery AS category_bakery, s.category_fruit AS category_fruit, s.category_salad AS category_salad, s.category_others AS category_others, s.closed_at AS closed_at,
            COALESCE(pf.product_no, pa.product_no) AS product_no,
            pf.pickup_start AS pickup_start, pf.pickup_end AS pickup_end, pf.origin_price AS origin_price, pf.sale_price AS sale_price, pf.product_explain AS product_explain, pf.reservation_end AS reservation_end, pf.amount AS amount,
            img.first_img AS store_img,
            b.bookmark_no AS bookmark_no, b.user_id AS user_id
        FROM Bookmark b
        JOIN Store s ON s.store_id = b.store_id
        LEFT JOIN (
            SELECT
                store_id,
                MIN(product_no) AS product_no
            FROM Product
            GROUP BY store_id
        ) pa ON pa.store_id = s.store_id
        LEFT JOIN Product pf ON pf.store_id = s.store_id
            AND (
                pf.reservation_end IS NULL
                OR DATE(pf.reservation_end) = CURDATE()
            )
        LEFT JOIN (
            SELECT
                store_id,
                MIN(store_img) AS first_img
            FROM Image
            GROUP BY store_id
        ) img ON img.store_id = s.store_id
        <where>
            b.user_id = #{user_id}
        </where>
    </select>

    <!-- deleteBookmark mapper -->
    <delete id="deleteBookmark" parameterType="map">
        DELETE FROM Bookmark
        WHERE bookmark_no = #{bookmark_no}
        AND user_id = #{user_id};
    </delete>

    <!-- selectOrderList mapper -->
    <select id="selectOrderList" resultType="kr.co.ohgoodfood.dto.UserOrder">
        SELECT
            pa.paid_no AS paid_no, pa.paid_price AS paid_price, pa.paid_status AS paid_status,
            s.store_name AS store_name, s.store_id AS store_id,
            p.product_no AS product_no, p.pickup_start AS pickup_start, p.pickup_end AS pickup_end, p.sale_price AS sale_price,
            o.order_no AS order_no, o.ordered_at AS ordered_at, o.quantity AS quantity, o.order_status AS order_status, o.canceld_from AS canceld_from,
            o.order_code AS order_code, o.user_id AS user_id,
            MIN(i.store_img) AS store_img
        FROM Store s
        JOIN Product p ON s.store_id = p.store_id
        JOIN Image   i ON i.store_id = s.store_id
        JOIN Orders  o ON o.store_id = p.store_id
        JOIN Paid    pa ON pa.order_no = o.order_no
        <where>
            <if test="filter.user_id != null">
                AND o.user_id = #{filter.user_id}
            </if>
            <if test="filter.order_status != null">
                <choose>
                    <!-- order_status가 List일 때 IN 절 -->
                    <when test="filter.order_status instanceof java.util.List">
                        AND o.order_status IN
                        <foreach item="status"
                                 collection="filter.order_status"
                                 open="("
                                 separator=","
                                 close=")">
                            #{status}
                        </foreach>
                    </when>
                    <!-- 단일값일때 처리 -->
                    <otherwise>
                        AND o.order_status = #{filter.order_status}
                    </otherwise>
                </choose>
            </if>
        </where>
        GROUP BY s.store_id, s.store_name, o.order_no;
    </select>

    <!-- updateOrderCanceldByUser mapper-->
    <update id="updateOrderCanceldByUser" parameterType="map">
        UPDATE Orders
            SET order_status = #{order_status},
            cancled_from =  #{cancled_from}
        WHERE order_no = #{order_no}
        AND user_id = #{user_id};
    </update>

    <!-- updateOrderConfirmed mapper-->
    <update id="updateOrderConfirmed" parameterType="map">
        UPDATE Orders
            SET order_status = #{order_status},
            order_code = #{order_code}
        WHERE order_no = #{order_no}
        AND user_id = #{user_id};
    </update>

    <!-- updateOrderPickUp mapper-->
    <update id="updateOrderPickup" parameterType="map">
        UPDATE Orders
            SET order_status = #{order_status}
        WHERE order_no = #{order_no}
        AND user_id = #{user_id};
    </update>

    <!-- selectUserOrderPay mapper-->
    <select id="selectUserOrderPay" resultType="kr.co.ohgoodfood.dto.UserOrder">
        SELECT  s.store_id AS store_id, s.store_name AS store_name,
            p.product_no AS product_no, p.pickup_start AS pickup_start, p.pickup_end AS pickup_end, p.amount AS amount, p.sale_price AS sale_price,
            MIN(i.store_img) AS store_img
        FROM Product p
        JOIN Store s ON p.store_id = s.store_id
        JOIN Image i ON i.store_id = s.store_id
        WHERE p.product_no = #{product_no}
        GROUP BY s.store_id, s.store_name;
    </select>

    <!-- selectUserOrderPayCheck mapper -->
    <select id="selectUserOrderPayCheck" resultType="kr.co.ohgoodfood.dto.OrderPayCheck">
        SELECT s.store_id AS store_id, s.store_status AS store_status,
            p.product_no AS `product_no`, p.amount AS amount
        FROM Store s JOIN Product p
        ON s.store_id = p.store_id
        WHERE product_no = #{product_no};
    </select>

    <!-- selectAlarmList mapper -->
    <select id="selectAlarmList" resultType="kr.co.ohgoodfood.dto.Alarm">
        SELECT
        alarm_title, alarm_contents, sended_at, alarm_displayed, alarm_read, alarm_no
        FROM Alarm
        WHERE receive_id = #{user_id};
    </select>

    <!-- updateAlarmRead mapper -->
    <update id="updateAlarmRead">
        UPDATE Alarm SET alarm_read = 'Y'
        WHERE alarm_read = 'N'
        AND receive_id = #{user_id};
    </update>

    <!-- updateAlarmHidden mapper -->
    <update id="updateAlarmHidden" parameterType="map">
        UPDATE Alarm SET alarm_displayed = 'N'
        WHERE alarm_no = #{alarm_no}
        AND receive_id = #{user_id};
    </update>

    <!-- selectMypage mapper -->
    <select id="selectUserInfo" parameterType="string" resultType="kr.co.ohgoodfood.dto.UserMypage">
	    SELECT
	      user_id       AS user_id,
	      user_nickname AS user_nickname
	    FROM Account
	    WHERE user_id = #{user_id}
  	</select>
	<select id="selectUserReviews" parameterType="string"  resultType="kr.co.ohgoodfood.dto.Review">
	    SELECT
	      r.review_no        AS review_no,
	      r.review_content   AS review_content,
	      r.writed_at        AS writed_at,
	      r.review_img       AS review_img,
	      r.is_blocked       AS is_blocked,
	      r.order_no         AS order_no,
	      p.origin_price     AS origin_price,
	      p.sale_price       AS sale_price,
	      s.store_id         AS store_id,
	      s.store_name       AS store_name,
	      s.store_menu       AS store_menu,
	      (
	        SELECT i.store_img
	          FROM Image i
	         WHERE i.store_id = s.store_id
	         ORDER BY i.img_no
	         LIMIT 1
	      ) AS store_img
	    FROM Review  r
	    JOIN Store   s ON r.store_id = s.store_id
	    JOIN Product p ON p.store_id = s.store_id
	    WHERE r.user_id    = #{user_id}
	      AND r.is_blocked = 'N'
	    ORDER BY r.writed_at DESC
  	</select>
  	
  	<!--  selectProductDetail mapper -->
  	<select id="selectProductInfo" parameterType="int" resultType="kr.co.ohgoodfood.dto.ProductDetail">
        SELECT
            s.store_id         AS store_id,
            s.store_name       AS store_name,
            s.store_menu       AS store_menu,
            s.opened_at        AS opened_at,
            s.closed_at        AS closed_at,
            s.category_bakery  AS category_bakery,
            s.category_fruit   AS category_fruit,
            s.category_salad   AS category_salad,
            s.category_others  AS category_others,
            s.store_address    AS store_address,
            s.store_telnumber  AS store_telnumber,
            p.product_no       AS product_no,
            p.pickup_start     AS pickup_start,
            p.pickup_end       AS pickup_end,
            p.origin_price     AS origin_price,
            p.sale_price       AS sale_price,
            p.reservation_end  AS reservation_end
        FROM Store s
        JOIN Product p ON s.store_id = p.store_id
        WHERE p.product_no = #{product_no}
    </select>

    <!-- 제품 이미지 전체 목록 조회: 해당 상품의 모든 이미지 URL 리스트 -->
    <select id="selectProductImages" parameterType="int" resultType="string">
		  SELECT i.store_img
		    FROM Image i
		    JOIN Product p ON i.store_id = p.store_id
		   WHERE p.product_no = #{product_no}
		   ORDER BY i.img_no
    </select>

    <!-- 제품 리뷰 리스트 조회: 해당 매장(store_id) 기준으로 모든 리뷰 조회 --> 
    <select id="selectProductReviews" parameterType="int" resultType="kr.co.ohgoodfood.dto.Review"> 
        SELECT
            a.user_nickname  AS user_nickname,
            r.review_no      AS review_no,
            r.review_content AS review_content,
            r.writed_at      AS writed_at,
            r.review_img     AS reviewImg
        FROM Review r
        JOIN Account a ON r.user_id = a.user_id
        WHERE r.store_id = (
            SELECT p.store_id
              FROM Product p
             WHERE p.product_no = #{product_no}
        )
          AND r.is_blocked = 'N'
        ORDER BY r.writed_at DESC
    </select>

	 
    <!-- 사용자 예약 정보 등록 
    <insert id="insertReservation" parameterType="map">
        INSERT INTO reservation (user_id, product_no, reserved_at)
        VALUES (#{user_id}, #{product_no}, NOW())
    </insert>
	-->
	<!-- 아이디 중복 조회 -->
	 <select id="countByUserId" parameterType="string" resultType="int">
	 	 SELECT COUNT(*)  
	 	 FROM Account
	  	 WHERE user_id = #{user_id}
	   </select>

  	<!-- 신규 회원 INSERT -->
	  <insert id="insertUser" parameterType="kr.co.ohgoodfood.dto.UserSignup">
	    INSERT INTO Account
	      (user_id, user_pwd, user_nickname, user_name, phone_number, join_date, user_status, location_agreement)
	    VALUES
	      (#{user_id}, #{user_pwd}, #{user_nickname}, #{user_name}, #{phone_number}, SYSDATE(), "Y", "Y")
	  </insert>
	  
	<!-- 모든 리뷰 모아보기 -->
	<select id="getAllReviews" parameterType="string" resultType="kr.co.ohgoodfood.dto.Review">
    SELECT
      r.review_no          AS review_no,
      r.review_content     AS review_content,
      r.writed_at          AS writed_at,
      r.review_img         AS review_img,
      a.user_nickname      AS user_nickname,
      p.origin_price       AS origin_price,
      p.sale_price         AS sale_price,
      s.store_id           AS store_id,
      s.store_name         AS store_name,
      s.store_menu         AS store_menu,
      ( SELECT i.store_img
          FROM Image i
         WHERE i.store_id = s.store_id
         ORDER BY i.img_no
         LIMIT 1
      )                    AS storeImg
    FROM Review r
    JOIN Account a ON r.user_id = a.user_id
    JOIN Store   s ON r.store_id = s.store_id
    JOIN Product p ON p.store_id = s.store_id

  </select>
</mapper>