<?xml version="1.0" encoding="UTF-8"?>
<!-- Mapper의 이름은 Mapper 인터페이스와 맞춰준다. -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http:/mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ohgoodfood.dao.PayMapper">

    <!-- 주문 정보 삽입 -->
    <insert id="insertOrder" parameterType="kr.co.ohgoodfood.dto.Orders">
        INSERT INTO Orders (ordered_at, quantity, order_status, user_id, store_id, product_no)
        VALUES (SYSDATE(), #{quantity}, #{order_status}, #{user_id}, #{store_id}, #{product_no});
        <selectKey keyProperty="order_no" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
    </insert>

    <!-- 결제 정보 삽입 -->
    <insert id="insertPaid" parameterType="kr.co.ohgoodfood.dto.Paid">
        INSERT INTO Paid (paid_type, paid_price, paid_time, paid_status, user_id, order_no, paid_code)
        VALUES ("tosspayments", #{paid_price}, SYSDATE(), #{paid_status}, #{user_id}, #{order_no}, #{paid_code});
    </insert>

    <!-- 상품 재고 가져오기 -->
    <select id="getProductAmount" parameterType="int" resultType="int">
        SELECT amount FROM Product WHERE product_no = #{product_no};
    </select>

    <!-- Piad_code로 Paid 상태 업데이트 -->
    <update id="updatePaidStatusByPaidCode" parameterType="String">
        UPDATE Paid SET paid_status = "Y" WHERE paid_code = #{paid_code};
    </update>

    <!-- paid_code로 주문 상태 업데이트 -->
    <update id="updateOrderStatusByPaidCode" parameterType="String">
        UPDATE Orders SET order_status = "reservation" WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code});
    </update>

    <!-- paid_code로 상품 수량 업데이트 -->
    <update id="updateProductAmount" parameterType="map">
        UPDATE Product SET amount = amount - #{quantity} 
        WHERE product_no = (SELECT product_no FROM Orders WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code}));
    </update>

    <!-- paid_code로 주문 수량 가져오기 -->
    <select id="getOrderQuantityByPaidCode" parameterType="String" resultType="int">
        SELECT IFNULL(quantity, 0) FROM Orders WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code});
    </select>

    <!-- paid_code로 상품 재고 가져오기 -->
    <select id="getProductAmountByPaidCode" parameterType="String" resultType="int">
        SELECT IFNULL(amount, 0) FROM Product WHERE product_no = (SELECT product_no FROM Orders WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code}));
    </select>

    <!-- paid_code로 주문 canceld_from 업데이트 -->
    <update id="updateOrderCanceldFromByPaidCode" parameterType="String">
        UPDATE Orders SET canceld_from = "store" WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code});
    </update>

    <!-- paid_code로 주문 canceld_from 가져오기 -->
    <select id="getOrderCanceldFromByPaidCode" parameterType="String" resultType="String">
        SELECT canceld_from FROM Orders WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code});
    </select>

    <!-- 가게 상태 확인하기 -->
    <select id="getStoreStatus" parameterType="String" resultType="String">
        SELECT store_status FROM Store WHERE store_id = #{store_id};
    </select>

    <!-- Paid_code로 가게 상태 확인하기 -->
    <select id="getStoreStatusByPaidCode" parameterType="String" resultType="String">
        SELECT store_status FROM Store WHERE store_id = (SELECT store_id FROM Orders WHERE order_no = (SELECT order_no FROM Paid WHERE paid_code = #{paid_code}));
    </select>

    <!-- Paid_code로 주문 번호 가져오기 -->
    <select id="getOrderNoByPaidCode" parameterType="String" resultType="int">
        SELECT order_no FROM Paid WHERE paid_code = #{paid_code};
    </select>
</mapper>